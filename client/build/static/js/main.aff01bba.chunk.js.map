{"version":3,"sources":["components.tsx/header.tsx","components.tsx/formInput.tsx","context/validationContext.tsx","types.ts","schema/Schema.ts","views/formView.tsx","components.tsx/usePersitForm.tsx","components.tsx/responseTree/reponseTreeString.tsx","components.tsx/responseTree/responseTreeArray.tsx","components.tsx/responseTree/responseTreeBoolean.tsx","components.tsx/responseTree/responseTreeNil.tsx","components.tsx/responseTree/responseTreeNumber.tsx","components.tsx/responseTree/responseTreeObject.tsx","components.tsx/responseTree/responseTreeJson.tsx","utils/statusCode.ts","utils/validationResult.ts","components.tsx/responseTree/index.tsx","components.tsx/listView.tsx","views/responseView.tsx","views/homeView.tsx","App.tsx","config/config.ts","reportWebVitals.ts","index.tsx"],"names":["Header","title","className","Container","FormInput","label","name","required","useFormContext","register","errors","formState","autoComplete","message","validationsContextDefaultValue","flows","isLoading","error","fetchFlows","resetError","ValidationContext","createContext","useFlowListManagement","useContext","handleFetchFlows","useCallback","postData","ValidationResult","querySchema","yup","shape","endpoint","apiKey","FormInputView","methods","useForm","resolver","yupResolver","handleSubmit","settings","watch","setValue","formName","shouldDirty","shouldValidate","onRestored","currentValue","useEffect","storage","localStorage","getItem","restoredData","productOpeningHours","productStartTimes","capabilities","supplierId","url","productType","storedValues","JSON","parse","Object","entries","key","value","setItem","stringify","usePersistForm","toast","position","autoClose","onClose","onSubmit","values","Row","spacing","Col","xs","sm","md","Button","type","disabled","onClick","removeItem","window","location","reload","ResponseTreeString","attr","last","level","spacer","repeat","ResponseTreeArray","onShowClick","show","isEmpty","R","useState","showState","setShowState","handleShow","_show","length","levelNext","arrowCls","isShown","map","item","index","ResponseTreeBoolean","ResponseTreeNil","ResponseTreeNumber","isFoldable","ObjectItem","ResponseTreeObject","spacerNext","ReponseTreeJson","props","StatusCodeColor","status","ResultColor","result","SUCCESS","FAILED","WARNING","ResponseTree","scenario","id","responseBodyState","response","body","responseIsNotNull","warnings","filter","Accordion","Item","eventKey","as","validationResult","success","Body","request","method","style","minHeight","background","border","margin","maxHeight","whiteSpace","err","ListView","flow","Badge","succesScenarios","totalScenarios","scenarios","scenerio","toString","OutputView","flowData","reduce","count","current","successScenarios","el","flat","warningScenarios","errorScenarios","ProgressBar","animated","now","bg","HomeView","App","productContextValue","setFlows","setIsLoading","setError","axios","post","backend","data","errorMessage","useMemo","useProductsContextValue","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.aff01bba.chunk.js","sourcesContent":["import { Container } from 'react-bootstrap'\r\n\r\nimport { FC } from 'react'\r\n\r\ntype IHeader = {\r\n  title: string\r\n}\r\n\r\nconst Header: FC<IHeader> = ({ title }) => {\r\n  return (\r\n    <div className=\"page-header\">\r\n      <Container>\r\n        <h2 className=\" mt-3 mb-3 page-title\">Octo-{title}</h2>\r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import { FC } from 'react'\r\nimport { useFormContext } from 'react-hook-form'\r\n\r\ntype IFormInput = {\r\n  name: string\r\n  label: string\r\n  required: boolean\r\n}\r\n\r\nconst FormInput: FC<IFormInput> = ({ label, name, required }) => {\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n  } = useFormContext()\r\n\r\n  return (\r\n    <div className=\"mb-3 mt-2\">\r\n      <label className={`form-label ${required ? 'required' : ''}`}>{label}</label>\r\n      <input\r\n        {...register(name)}\r\n        className={`form-control ${errors[name] ? 'is-invalid' : ''}`}\r\n        autoComplete=\"off\"\r\n        name={name}\r\n      />\r\n\r\n      <div className=\"invalid-feedback\">{`${errors[name] ? errors[name]?.message : ''}`}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FormInput\r\n","import { createContext, useCallback, useContext, useMemo, useState } from 'react'\r\nimport axios from 'axios'\r\nimport { ValidationContextData, FlowResult, PostData } from '../types'\r\nimport { BaseUrl } from '../config/config'\r\n\r\nexport const validationsContextDefaultValue: ValidationContextData = {\r\n  flows: [],\r\n  isLoading: false,\r\n  error: '',\r\n  fetchFlows: () => null,\r\n  resetError: () => null,\r\n}\r\n\r\nexport const ValidationContext = createContext<ValidationContextData>(validationsContextDefaultValue)\r\n\r\nexport function useProductsContextValue(): ValidationContextData {\r\n  const [flows, setFlows] = useState<FlowResult[]>([])\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  const fetchFlows = useCallback(\r\n    async (postData: PostData) => {\r\n      setIsLoading(true)\r\n      try {\r\n        const response = await axios.post(BaseUrl, {backend: postData})\r\n        const data = response?.data\r\n        setFlows(data)\r\n      } catch (error: any) {\r\n        if (error.response) {\r\n          if (error.response.status === 400) {\r\n            setError(error.response.data.errorMessage)\r\n          } else {\r\n            setError('Invalid request!, please try again.')\r\n          }\r\n        } else {\r\n          setError('Invalid request!, please try again.')\r\n        }\r\n      } finally {\r\n        setIsLoading(false)\r\n      }\r\n    },\r\n    [setFlows]\r\n  )\r\n\r\n  const resetError = useCallback(() => {\r\n    setError(null)\r\n  }, [])\r\n\r\n  return useMemo(\r\n    () => ({ flows, error, isLoading, fetchFlows, resetError }),\r\n    [flows, isLoading, error, fetchFlows, resetError]\r\n  )\r\n}\r\n\r\nexport function useFlowListManagement(): any {\r\n  const { flows, fetchFlows, isLoading, error, resetError }: ValidationContextData = useContext(ValidationContext)\r\n  const handleFetchFlows = useCallback(\r\n    (postData: PostData) => {\r\n      fetchFlows(postData)\r\n    },\r\n    [fetchFlows]\r\n  )\r\n  return {\r\n    handleFetchFlows,\r\n    flows,\r\n    isLoading,\r\n    error,\r\n    resetError,\r\n  }\r\n}\r\n","export type JsonKey = string | number\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type JsonValue = any\r\nexport type Json = JsonValue | Record<JsonKey, JsonValue>\r\ntype Nullable<T> = T | null;\r\n\r\n\r\nexport interface ScenarioResult {\r\n  name: string;\r\n  success: boolean;\r\n  validationResult: ValidationResult;\r\n  request: Nullable<ScenarioRequest>;\r\n  response: Nullable<ScenarioResponse>;\r\n  errors: any[]; // validation errors\r\n  description: string;\r\n}\r\n\r\nexport enum ValidationResult {\r\n  SUCCESS = 'SUCCESS',\r\n  WARNING = 'WARNING',\r\n  FAILED = 'FAILED',\r\n}\r\n\r\nexport interface ScenarioRequest {\r\n  url: string;\r\n  method: string;\r\n  body: Nullable<any>;\r\n  headers: Record<string, string>;\r\n}\r\n\r\nexport interface ScenarioResponse {\r\n  body: Nullable<string>;\r\n  status: Nullable<number>;\r\n  error: Nullable<{\r\n    body: any;\r\n  }>;\r\n  headers: Record<string, string>;\r\n}\r\n\r\nexport interface FlowResult {\r\n  name: string;\r\n  success: boolean;\r\n  validationResult: ValidationResult;\r\n  totalScenarios: number;\r\n  succesScenarios: number;\r\n  scenarios: ScenarioResult[];\r\n  docs: string;\r\n}\r\n\r\nexport type ValidationContextData = {\r\n  flows: FlowResult[]\r\n  isLoading: boolean\r\n  error: string | null\r\n  fetchFlows: (data: PostData) => void\r\n  resetError: () => void\r\n}\r\n\r\nexport type PostData = {\r\n  endpoint: string;\r\n  apiKey: string;\r\n}\r\n","import * as yup from 'yup'\r\nimport { PostData } from '../types'\r\n\r\nexport const querySchema: yup.SchemaOf<PostData> = yup\r\n  .object()\r\n  .shape({\r\n      endpoint: yup.string().required('This field is required!'),\r\n      apiKey: yup.string().required('This field is required!'),\r\n  })\r\n  .required();","import { Col, Row, Button, Container } from 'react-bootstrap'\r\nimport { FC, useEffect } from 'react'\r\nimport FormInput from '../components.tsx/formInput'\r\nimport { FormProvider, SubmitHandler, useForm } from 'react-hook-form'\r\nimport { useFlowListManagement } from '../context/validationContext'\r\nimport { PostData } from '../types'\r\nimport { ToastContainer, toast } from 'react-toastify'\r\nimport { usePersistForm } from '../components.tsx/usePersitForm'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport { querySchema } from '../schema/Schema'\r\n\r\nconst FormInputView: FC = () => {\r\n  const { handleFetchFlows, error, isLoading, resetError } = useFlowListManagement()\r\n  const methods = useForm<PostData>({\r\n    resolver: yupResolver(querySchema)\r\n  })\r\n\r\n  const {\r\n    handleSubmit,\r\n    watch,\r\n    setValue,\r\n  } = methods\r\n\r\n  usePersistForm<PostData>({\r\n    formName: 'FORM_DATA_KEY',\r\n    watch,\r\n    setValue,\r\n    shouldDirty: true,\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      toast.error(error as any, {\r\n        position: 'top-right',\r\n        autoClose: 5000,\r\n        onClose() {\r\n          resetError()\r\n        },\r\n      })\r\n    }\r\n  }, [error, resetError])\r\n\r\n  const onSubmitHandler: SubmitHandler<PostData> = values => {\r\n    handleFetchFlows(values)\r\n  }\r\n\r\n  const handleResetForm = () => {\r\n    localStorage.removeItem('FORM_DATA_KEY')\r\n    window.location.reload()\r\n  }\r\n  return (\r\n    <FormProvider {...methods}>\r\n      <form onSubmit={handleSubmit(onSubmitHandler)}>\r\n        <fieldset className=\" bg-white form-fieldset\">\r\n          <ToastContainer />\r\n          <Container>\r\n            <Row className=\"py-2\" spacing={4}>\r\n              <Col xs={12} sm={6} md={4}>\r\n                <FormInput label=\"Endpoint\" name=\"endpoint\" required={true} />\r\n              </Col>\r\n              <Col xs={12} sm={6} md={4}>\r\n                <FormInput label=\"Api Key\" name=\"apiKey\" required={true} />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col className=\" d-flex justify-content-start \">\r\n                <Button className=\"mt-3\" type=\"submit\" disabled={isLoading}>\r\n                  Validate\r\n                </Button>\r\n              </Col>\r\n              <Col className=\" d-flex justify-content-end \">\r\n                <Button className=\"mt-3 btn btn-light text-blue  \" type=\"button\" onClick={handleResetForm}>\r\n                  Reset\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </fieldset>\r\n      </form>\r\n    </FormProvider>\r\n  )\r\n}\r\n\r\nexport default FormInputView\r\n","import { SetValueConfig, UseFormWatch } from 'react-hook-form'\r\nimport { useEffect } from 'react'\r\nimport { PostData } from '../types'\r\n\r\ninterface UsePersistFormProps<T = unknown> {\r\n  formName: string\r\n  watch: UseFormWatch<PostData>\r\n  setValue: (name: any, value: any, options?: SetValueConfig) => void\r\n  shouldValidate?: boolean\r\n  shouldDirty?: boolean\r\n  onRestored?: (values: T) => void\r\n}\r\n\r\nexport const usePersistForm = <T = unknown,>(settings: UsePersistFormProps<T>): any => {\r\n  const { watch, setValue, formName, shouldDirty = false, shouldValidate = false, onRestored } = settings\r\n\r\n  const currentValue = watch()\r\n  useEffect(() => {\r\n    const storage = localStorage.getItem(formName)\r\n\r\n    const restoredData: any = {\r\n      productOpeningHours: null,\r\n      productStartTimes: null,\r\n      capabilities: [],\r\n      supplierId: '',\r\n      url: '',\r\n      productType: [],\r\n    }\r\n\r\n    if (storage) {\r\n      const storedValues = JSON.parse(storage)\r\n\r\n      for (const [key, value] of Object.entries(storedValues)) {\r\n        setValue(key, value, { shouldValidate, shouldDirty })\r\n        restoredData[key] = value\r\n      }\r\n      if (onRestored) {\r\n        onRestored(restoredData)\r\n      }\r\n    }\r\n  }, [formName, setValue, shouldValidate, shouldDirty, onRestored])\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(formName, JSON.stringify(currentValue))\r\n  })\r\n}\r\n","import { FC } from 'react'\r\n\r\ninterface Props {\r\n  attr?: boolean\r\n  last?: boolean\r\n  level?: number\r\n  value: string\r\n}\r\n\r\nconst ResponseTreeString: FC<Props> = ({ attr = false, last = true, level = 0, value }) => {\r\n  const spacer = ' '.repeat(level)\r\n\r\n  return (\r\n    <>\r\n      {!attr && spacer}\r\n      <span className=\"hljs-string\">{JSON.stringify(value)}</span>\r\n      {!last && ','}\r\n      {'\\n'}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ResponseTreeString\r\n","import * as R from 'ramda'\r\nimport { FC, useState } from 'react'\r\nimport { Json } from '../../types'\r\n\r\nimport ReponseTreeJson from './responseTreeJson'\r\n\r\ninterface Props {\r\n  attr?: boolean\r\n  last?: boolean\r\n  level?: number\r\n  onShowClick?: () => void\r\n  show?: boolean\r\n  value: Json\r\n}\r\n\r\nconst ResponseTreeArray: FC<Props> = ({ attr = false, last = true, level = 0, onShowClick, show = false, value }) => {\r\n  const spacer = ' '.repeat(level)\r\n  const isEmpty = R.isEmpty(value)\r\n  const [showState, setShowState] = useState(level === 0)\r\n\r\n  if (isEmpty) {\r\n    return (\r\n      <>\r\n        {!attr && spacer}\r\n        {'[]'}\r\n        {!last && ','}\r\n        {'\\n'}\r\n      </>\r\n    )\r\n  }\r\n\r\n  const handleShow = () => {\r\n    setShowState(_show => !_show)\r\n  }\r\n  const length = value.length - 1\r\n  const levelNext = level + 2\r\n  const arrowCls = `highlighter-fold-arrow ${!showState ? 'folded' : ''}`\r\n  const isShown = (!attr && showState) || (attr && show)\r\n\r\n  return (\r\n    <>\r\n      {attr ? (\r\n        '['\r\n      ) : (\r\n        <>\r\n          {spacer}\r\n          <span className=\"highlighter-attr\">\r\n            <span className={arrowCls} onClick={handleShow} />\r\n            {'['}\r\n          </span>\r\n        </>\r\n      )}\r\n      {isShown ? (\r\n        <>\r\n          {'\\n'}\r\n          {value.map((item: Json, index: number) => (\r\n            <ReponseTreeJson key={index} last={index === length} level={levelNext} value={item} />\r\n          ))}\r\n          {spacer}\r\n        </>\r\n      ) : (\r\n        <small className=\"highlighter-rest text-muted\" onClick={attr ? onShowClick : handleShow}>\r\n          {' ... '}\r\n        </small>\r\n      )}\r\n      {']'}\r\n      {!last && ','}\r\n      {'\\n'}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ResponseTreeArray\r\n","import { FC } from 'react'\r\n\r\ninterface Props {\r\n  attr?: boolean\r\n  last?: boolean\r\n  level?: number\r\n  value: boolean\r\n}\r\n\r\nconst ResponseTreeBoolean: FC<Props> = ({ attr = false, last = true, level = 0, value }) => {\r\n  const spacer = ' '.repeat(level)\r\n\r\n  return (\r\n    <>\r\n      {!attr && spacer}\r\n      <span className={`hljs-literal ${value === true ? 'text-success' : 'text-danger'}`}>{JSON.stringify(value)}</span>\r\n      {!last && ','}\r\n      {'\\n'}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ResponseTreeBoolean\r\n","import { FC } from 'react'\r\n\r\ninterface Props {\r\n  attr?: boolean\r\n  last?: boolean\r\n  level?: number\r\n  value: null\r\n}\r\n\r\nconst ResponseTreeNil: FC<Props> = ({ attr = false, last = true, level = 0, value }) => {\r\n  const spacer = ' '.repeat(level)\r\n\r\n  return (\r\n    <>\r\n      {!attr && spacer}\r\n      <span className=\"hljs-literal\">{JSON.stringify(value)}</span>\r\n      {!last && ','}\r\n      {'\\n'}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ResponseTreeNil\r\n","import { FC } from 'react'\r\n\r\ninterface Props {\r\n  attr?: boolean\r\n  last?: boolean\r\n  level?: number\r\n  value: number\r\n}\r\n\r\nconst ResponseTreeNumber: FC<Props> = ({ attr = false, last = true, level = 0, value }) => {\r\n  const spacer = ' '.repeat(level)\r\n\r\n  return (\r\n    <>\r\n      {!attr && spacer}\r\n      <span className=\"hljs-number\">{value}</span>\r\n      {!last && ','}\r\n      {'\\n'}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ResponseTreeNumber\r\n","import * as R from 'ramda'\r\nimport { FC, useState } from 'react'\r\n\r\nimport { Json, JsonKey, JsonValue } from '../../types'\r\nimport ReponseTreeJson from './responseTreeJson'\r\n\r\ninterface ObjectItemProps {\r\n  index: number\r\n  length: number\r\n  level?: number\r\n  name: JsonKey\r\n  spacer?: string\r\n  value: JsonValue\r\n}\r\n\r\nconst isFoldable = (value: JsonValue): boolean => {\r\n  const type = R.type(value)\r\n\r\n  return (type === 'Array' || type === 'Object') && !R.isEmpty(value)\r\n}\r\n\r\nconst ObjectItem: FC<ObjectItemProps> = ({ index, length, level = 0, name, spacer = '', value }) => {\r\n  const [showState, setShowState] = useState(true)\r\n  const handleShow = () => {\r\n    setShowState(_show => !_show)\r\n  }\r\n  const arrowCls = `highlighter-fold-arrow ${!showState ? 'folded' : ''}`\r\n\r\n  return (\r\n    <>\r\n      {spacer}\r\n      <span className=\"highlighter-attr\">\r\n        {isFoldable(value) && <span className={arrowCls} onClick={handleShow} />}\r\n        <span className=\"hljs-attr\">\"{name}\"</span>\r\n        {': '}\r\n      </span>\r\n      <ReponseTreeJson\r\n        attr={true}\r\n        last={index === length}\r\n        level={level}\r\n        onShowClick={handleShow}\r\n        show={showState}\r\n        value={value}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\ninterface Props {\r\n  attr?: boolean\r\n  last?: boolean\r\n  level?: number\r\n  onShowClick?: () => void\r\n  show?: boolean\r\n  value: Json\r\n}\r\n\r\nconst ResponseTreeObject: FC<Props> = ({ attr = false, last = true, level = 0, onShowClick, show = false, value }) => {\r\n  const entries = Object.entries(value)\r\n  const spacer = ' '.repeat(level)\r\n  const isEmpty = R.isEmpty(entries)\r\n  const [showState, setShowState] = useState(true)\r\n\r\n  if (isEmpty) {\r\n    return (\r\n      <>\r\n        {!attr && spacer}\r\n        {'{}'}\r\n        {!last && ','}\r\n        {'\\n'}\r\n      </>\r\n    )\r\n  }\r\n\r\n  const handleShow = () => {\r\n    setShowState(_show => !_show)\r\n  }\r\n  const length = entries.length - 1\r\n  const levelNext = level + 2\r\n  const spacerNext = ' '.repeat(levelNext)\r\n  const arrowCls = `highlighter-fold-arrow ${!showState ? 'folded' : ''}`\r\n  const isShown = (!attr && showState) || (attr && show)\r\n\r\n  return (\r\n    <>\r\n      {attr ? (\r\n        '{'\r\n      ) : (\r\n        <>\r\n          {spacer}\r\n          <span className=\"highlighter-attr\">\r\n            <span className={arrowCls} onClick={handleShow} />\r\n            {'{'}\r\n          </span>\r\n        </>\r\n      )}\r\n      {isShown ? (\r\n        <>\r\n          {'\\n'}\r\n          {entries.map(([key, item], index) => (\r\n            <ObjectItem\r\n              index={index}\r\n              key={key}\r\n              length={length}\r\n              level={levelNext}\r\n              name={key}\r\n              spacer={spacerNext}\r\n              value={item}\r\n            />\r\n          ))}\r\n          {spacer}\r\n        </>\r\n      ) : (\r\n        <small className=\"highlighter-rest text-muted\" onClick={attr ? onShowClick : handleShow}>\r\n          {' ... '}\r\n        </small>\r\n      )}\r\n      {'}'}\r\n      {!last && ','}\r\n      {'\\n'}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ResponseTreeObject\r\n","import * as R from 'ramda'\r\nimport { FC } from 'react'\r\nimport { Json } from '../../types'\r\nimport ResponseTreeString from './reponseTreeString'\r\nimport ResponseTreeArray from './responseTreeArray'\r\nimport ResponseTreeBoolean from './responseTreeBoolean'\r\nimport ResponseTreeNil from './responseTreeNil'\r\nimport ResponseTreeNumber from './responseTreeNumber'\r\nimport ResponseTreeObject from './responseTreeObject'\r\n\r\ninterface Props {\r\n  attr?: boolean\r\n  last?: boolean\r\n  level?: number\r\n  onShowClick?: () => void\r\n  show?: boolean\r\n  value: Json\r\n}\r\n\r\nconst ReponseTreeJson: FC<Props> = ({ attr = false, last = true, level = 0, onShowClick, show = true, value }) => {\r\n  const props = {\r\n    attr: attr,\r\n    last: last,\r\n    level: level,\r\n    value: value,\r\n  }\r\n\r\n  switch (R.type(value)) {\r\n    case 'Array':\r\n      return <ResponseTreeArray {...props} onShowClick={onShowClick} show={show} />\r\n    case 'Boolean':\r\n      return <ResponseTreeBoolean {...props} />\r\n    case 'Null':\r\n      return <ResponseTreeNil {...props} />\r\n    case 'Number':\r\n      return <ResponseTreeNumber {...props} />\r\n    case 'Object':\r\n      return <ResponseTreeObject {...props} onShowClick={onShowClick} show={show} />\r\n    case 'String':\r\n      return <ResponseTreeString {...props} />\r\n  }\r\n\r\n  return <span />\r\n}\r\n\r\nexport default ReponseTreeJson\r\n","export const StatusCodeColor = (status: number): string => {\r\n  switch (status) {\r\n    case 200:\r\n      return 'bg-green-lt'\r\n    case 400:\r\n      return 'bg-red-lt'\r\n    case 500:\r\n      return 'bg-red-lt'\r\n    default:\r\n      return 'bg-yellow-lt'\r\n  }\r\n}\r\n","import { ValidationResult } from '../types'\r\n\r\nexport const ResultColor = (result: ValidationResult): string => {\r\n  switch (result) {\r\n    case ValidationResult.SUCCESS:\r\n      return 'bg-green-lt'\r\n    case ValidationResult.FAILED:\r\n      return 'bg-red-lt'\r\n    case ValidationResult.WARNING:\r\n      return 'bg-yellow-lt'\r\n  }\r\n}","import { FC } from 'react'\r\nimport { Accordion } from 'react-bootstrap'\r\nimport { ScenarioResult } from '../../types'\r\nimport * as R from 'ramda'\r\nimport ReponseTreeJson from './responseTreeJson'\r\nimport { StatusCodeColor } from '../../utils/statusCode'\r\nimport { ResultColor } from './../../utils/validationResult'\r\n\r\ntype IListView = {\r\n  scenario: ScenarioResult\r\n  id: string\r\n}\r\n\r\nconst ResponseTree: FC<IListView> = ({ scenario, id }) => {\r\n  const responseBodyState = scenario.response?.body !== null && scenario.response?.error === null;\r\n  const responseIsNotNull =\r\n    scenario.response?.body !== null && scenario.response?.body?.length === 0 && scenario.response?.error === null;\r\n  const warnings = scenario.errors.filter(error => error.type === 'WARNING');\r\n  const errors = scenario.errors.filter(error => error.type === 'CRITICAL');\r\n\r\n\r\n  return (\r\n    <Accordion.Item eventKey={id}>\r\n      <Accordion.Header as=\"div\" className=\" accordio-header\">\r\n        <div>\r\n          <span className={`badge ${ResultColor(scenario.validationResult)}`}>{`${\r\n            scenario.success ? 'SUCCESS' : 'FAILED'\r\n          }`}</span>\r\n        </div>\r\n        <label className=\" px-3 text-muted\">{scenario.name}</label>\r\n      </Accordion.Header>\r\n      <Accordion.Body as=\"div\" className=\"h-25 .bg-gradient overflow-auto\">\r\n        <div className=\"card-body\">\r\n          <div className=\"mb-2\">\r\n            <strong className=\"mb-3 text-muted\">url</strong>\r\n          </div>\r\n\r\n          <div className=\" mb-3 py-2 square border w-full text-muted\"><span className='badge badge-primary mx-2'>{scenario.request?.method}</span>{scenario.request?.url}</div>\r\n\r\n          {scenario.request?.body && (\r\n            <div>\r\n              <div className=\"mb-2\">\r\n                <strong className=\" mb-3 text-muted\">req body</strong>\r\n              </div>\r\n\r\n              <div className=\" mb-3 px-3 p-1 square border bg-light w-full \" style={{ minHeight: '60px' }}>\r\n                <pre\r\n                  className={'text-muted'}\r\n                  style={{\r\n                    background: 'transparent',\r\n                    border: 'none',\r\n                    margin: 0,\r\n                    maxHeight: '30vh',\r\n                    whiteSpace: 'pre',\r\n                  }}\r\n                >\r\n                  <code>{!R.isNil(scenario.request?.body) && <ReponseTreeJson value={scenario.request?.body} />}</code>\r\n                </pre>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {!responseIsNotNull && (\r\n            <div>\r\n              <div className=\"mb-2\">\r\n                <strong className=\"mb-3 px-2 text-muted\">res body</strong>\r\n                <span className={`badge  ${StatusCodeColor(scenario.response?.status ?? 0)}`}>{scenario.response?.status}</span>\r\n              </div>\r\n\r\n              <div className=\" mb-3 px-3 p-1 square border w-full \" style={{ minHeight: '70px' }}>\r\n                {responseBodyState ? (\r\n                  <pre\r\n                    className={'text-muted'}\r\n                    style={{\r\n                      background: 'transparent',\r\n                      border: 'none',\r\n                      margin: 0,\r\n                      maxHeight: '30vh',\r\n                      whiteSpace: 'pre',\r\n                    }}\r\n                  >\r\n                    <code>{!R.isNil(scenario.response?.body) && <ReponseTreeJson value={JSON.parse(scenario.response?.body ?? '')} />}</code>\r\n                  </pre>\r\n                ) : (\r\n                  <pre\r\n                    className={'text-muted'}\r\n                    style={{\r\n                      background: 'transparent',\r\n                      border: 'none',\r\n                      margin: 0,\r\n                      maxHeight: '30vh',\r\n                      whiteSpace: 'pre',\r\n                    }}\r\n                  >\r\n                    <code>\r\n                      {!R.isNil(scenario.response?.error) && <ReponseTreeJson value={JSON.parse(scenario.response?.error?.body ?? '')} />}\r\n                    </code>\r\n                  </pre>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n          {warnings.length > 0 && (\r\n            <div>\r\n              <div className=\"mb-2\">\r\n                <strong className=\"badge bg-yellow-lt\">warnings</strong>\r\n              </div>\r\n\r\n              <div className=\"mb-3  px-3 p-2 square border w-full text-muted\" style={{ minHeight: '30px' }}>\r\n                {warnings.map((err, index) => {\r\n                  return <div key={index} className='px-2'><li>{err.message}</li></div>\r\n                })}\r\n              </div>\r\n            </div>\r\n          )}\r\n          {errors.length > 0 && (\r\n            <div>\r\n              <div className=\"mb-2\">\r\n                <strong className=\"badge bg-red-lt\">errors</strong>\r\n              </div>\r\n\r\n              <div className=\"mb-3  px-3 p-2 square border w-full text-muted\" style={{ minHeight: '30px' }}>\r\n                {errors.map((err, index) => {\r\n                  return <div key={index} className='px-2'><li>{err.message}</li></div>\r\n                })}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </Accordion.Body>\r\n    </Accordion.Item>\r\n  )\r\n}\r\n\r\nexport default ResponseTree\r\n","import { FC } from 'react'\r\nimport { Accordion } from 'react-bootstrap'\r\nimport { FlowResult } from '../types'\r\nimport ResponseTree from './responseTree'\r\nimport Badge from 'react-bootstrap/Badge'\r\nimport { ResultColor } from './../utils/validationResult';\r\ntype IListView = {\r\n  flow: FlowResult\r\n  id: string\r\n}\r\n\r\nconst ListView: FC<IListView> = ({ flow, id }) => {\r\n  return (\r\n    <Accordion.Item eventKey={id}>\r\n      <Accordion.Header as=\"div\" className=\"shadow-sm\">\r\n        <Badge as=\"span\" className=\"w-5 p-1\">\r\n          {' '}\r\n          {flow.succesScenarios}/{flow.totalScenarios}\r\n        </Badge>\r\n\r\n        <div className=\"px-3\">\r\n          <span className={`badge ${ResultColor(flow.validationResult)}`}>{`${\r\n            flow.success ? 'SUCCESS' : 'FAILED'\r\n          }`}</span>\r\n        </div>\r\n        <label className=\"w-50 text-truncate px-3 text-muted\">{flow.name}</label>\r\n      </Accordion.Header>\r\n      <Accordion.Body as=\"div\" className=\"h-25 .bg-gradient overflow-auto\">\r\n        <Accordion as=\"div\" className=\" h-50 bg-light\">\r\n          {flow?.scenarios.map((scenerio, index) => {\r\n            return <ResponseTree key={index} id={index.toString()} scenario={scenerio} />\r\n          })}\r\n        </Accordion>\r\n      </Accordion.Body>\r\n    </Accordion.Item>\r\n  )\r\n}\r\n\r\nexport default ListView\r\n","import { FC } from 'react'\r\nimport { useFlowListManagement } from '../context/validationContext'\r\nimport { Accordion, Badge, Container, ProgressBar } from 'react-bootstrap'\r\nimport { FlowResult, ValidationResult } from '../types'\r\nimport ListView from '../components.tsx/listView'\r\n\r\nconst OutputView: FC = () => {\r\n  const { flows, isLoading } = useFlowListManagement()\r\n  const flowData: FlowResult[] = flows && flows\r\n  const totalScenarios = flowData?.reduce((count, current) => count + current.scenarios.length, 0)\r\n\r\n  const successScenarios = flowData.length > 0 ? flowData?.map(item => {\r\n    return item.scenarios.filter(el => el.success === true)\r\n  }).flat(1).length : ''\r\n  \r\n  const warningScenarios = flowData.length > 0 ? flowData.map(flow => {\r\n    return flow.scenarios.filter(scenario => scenario.validationResult === ValidationResult.WARNING)\r\n  }).flat(1).length : '';\r\n\r\n  const errorScenarios = flowData.length > 0 ? flowData.map(flow => {\r\n    return flow.scenarios.filter(scenario => scenario.validationResult === ValidationResult.FAILED)\r\n  }).flat(1).length : '';\r\n\r\n  return (\r\n    <>\r\n        {isLoading ? (\r\n          <div className=\"d-flex justify-content-center\">\r\n            <ProgressBar animated now={100} />\r\n          </div>\r\n        ) : (\r\n        <>\r\n          {flows.length > 0 ? (\r\n            <div className=\"mb-3\">\r\n              <div className=\"card w-full\">\r\n                <div className=\"card-body\">\r\n                  <Container>\r\n                    <div className=\"mr-3 mb-3  py-2 text-capitalize\">\r\n                      <Badge bg='primary'>\r\n                        {`${totalScenarios}`}\r\n                      </Badge>\r\n                      <strong className=\"px-2\">Total Scenarios</strong>\r\n\r\n                      <Badge className='ms-3 bg-green-lt'>\r\n                        {`${successScenarios}`}\r\n                      </Badge>\r\n                      <strong className=\"px-2\">Successful</strong>\r\n\r\n                      <Badge className='ms-3 bg-yellow-lt'>\r\n                        {`${warningScenarios}`}\r\n                      </Badge>\r\n                      <strong className=\"px-2\">Warnings</strong>\r\n\r\n                      <Badge className='ms-3 bg-red-lt'>\r\n                        {`${errorScenarios}`}\r\n                      </Badge>\r\n                      <strong className=\"px-2\">Critical Errors</strong>\r\n                    </div>\r\n\r\n                    <Accordion as=\"div\" className=\" h-50 bg-light\">\r\n                      {flowData?.map((flow, index) => {\r\n                        return <ListView key={index} id={index.toString()} flow={flow} />\r\n                      })}\r\n                    </Accordion>\r\n                  </Container>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </>  \r\n        )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default OutputView\r\n","import { Row, Col, Container } from 'react-bootstrap'\r\n\r\nimport { FC } from 'react'\r\nimport Header from '../components.tsx/header'\r\nimport FormInputView from './formView'\r\nimport OutputView from './responseView'\r\n\r\nconst HomeView: FC = () => {\r\n  return (\r\n    <Container>\r\n      <Header title=\"Validation\" />\r\n      <Container>\r\n        <Row>\r\n          <Col md={12} xs={12}>\r\n            <FormInputView />\r\n          </Col>\r\n          <Col md={12} xs={12}>\r\n            <OutputView />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default HomeView\r\n","import './App.css'\r\nimport HomeView from './views/homeView'\r\nimport { ValidationContext, useProductsContextValue } from './context/validationContext'\r\nimport { ReactElement } from 'react'\r\n\r\nfunction App():ReactElement {\r\n  const productContextValue = useProductsContextValue()\r\n  return (\r\n    <ValidationContext.Provider value={productContextValue}>\r\n      <HomeView />\r\n    </ValidationContext.Provider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","export const BaseUrl = 'http://localhost:3001/validate'","import { ReportHandler } from 'web-vitals'\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","import './styles/index.scss'\r\n\r\nimport ReactDOM from 'react-dom/client'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement)\r\nroot.render(<App />)\r\n\r\nreportWebVitals()\r\n"],"sourceRoot":""}